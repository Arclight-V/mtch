// Code generated by MockGen. DO NOT EDIT.
// Source: register.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	auth "github.com/Arclight-V/mtch/auth-service/internal/usecase/auth"
	gomock "github.com/golang/mock/gomock"
)

// MockRegisterUseCase is a mock of RegisterUseCase interface.
type MockRegisterUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockRegisterUseCaseMockRecorder
}

// MockRegisterUseCaseMockRecorder is the mock recorder for MockRegisterUseCase.
type MockRegisterUseCaseMockRecorder struct {
	mock *MockRegisterUseCase
}

// NewMockRegisterUseCase creates a new mock instance.
func NewMockRegisterUseCase(ctrl *gomock.Controller) *MockRegisterUseCase {
	mock := &MockRegisterUseCase{ctrl: ctrl}
	mock.recorder = &MockRegisterUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRegisterUseCase) EXPECT() *MockRegisterUseCaseMockRecorder {
	return m.recorder
}

// Register mocks base method.
func (m *MockRegisterUseCase) Register(ctx context.Context, input auth.RegisterInput) (auth.RegisterOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", ctx, input)
	ret0, _ := ret[0].(auth.RegisterOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register.
func (mr *MockRegisterUseCaseMockRecorder) Register(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockRegisterUseCase)(nil).Register), ctx, input)
}
