// Code generated by MockGen. DO NOT EDIT.
// Source: potrs.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	pb "proto"
	reflect "reflect"
	time "time"

	domain "github.com/Arclight-V/mtch/auth-service/internal/domain"
	gomock "github.com/golang/mock/gomock"
)

// MockUserRepo is a mock of UserRepo interface.
type MockUserRepo struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepoMockRecorder
}

// MockUserRepoMockRecorder is the mock recorder for MockUserRepo.
type MockUserRepoMockRecorder struct {
	mock *MockUserRepo
}

// NewMockUserRepo creates a new mock instance.
func NewMockUserRepo(ctrl *gomock.Controller) *MockUserRepo {
	mock := &MockUserRepo{ctrl: ctrl}
	mock.recorder = &MockUserRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepo) EXPECT() *MockUserRepoMockRecorder {
	return m.recorder
}

// Login mocks base method.
func (m *MockUserRepo) Login(ctx context.Context, request *pb.LoginRequest) (*pb.LoginResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", ctx, request)
	ret0, _ := ret[0].(*pb.LoginResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockUserRepoMockRecorder) Login(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockUserRepo)(nil).Login), ctx, request)
}

// Register mocks base method.
func (m *MockUserRepo) Register(ctx context.Context, request *pb.RegisterRequest) (*pb.RegisterResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", ctx, request)
	ret0, _ := ret[0].(*pb.RegisterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register.
func (mr *MockUserRepoMockRecorder) Register(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockUserRepo)(nil).Register), ctx, request)
}

// VerifyEmail mocks base method.
func (m *MockUserRepo) VerifyEmail(ctx context.Context, request *pb.VerifyEmailRequest) (*pb.VerifyEmailResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyEmail", ctx, request)
	ret0, _ := ret[0].(*pb.VerifyEmailResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyEmail indicates an expected call of VerifyEmail.
func (mr *MockUserRepoMockRecorder) VerifyEmail(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyEmail", reflect.TypeOf((*MockUserRepo)(nil).VerifyEmail), ctx, request)
}

// MockTokenSigner is a mock of TokenSigner interface.
type MockTokenSigner struct {
	ctrl     *gomock.Controller
	recorder *MockTokenSignerMockRecorder
}

// MockTokenSignerMockRecorder is the mock recorder for MockTokenSigner.
type MockTokenSignerMockRecorder struct {
	mock *MockTokenSigner
}

// NewMockTokenSigner creates a new mock instance.
func NewMockTokenSigner(ctrl *gomock.Controller) *MockTokenSigner {
	mock := &MockTokenSigner{ctrl: ctrl}
	mock.recorder = &MockTokenSignerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTokenSigner) EXPECT() *MockTokenSignerMockRecorder {
	return m.recorder
}

// ParseVerifyToken mocks base method.
func (m *MockTokenSigner) ParseVerifyToken(tokenStr string) (domain.VerifyEmailToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseVerifyToken", tokenStr)
	ret0, _ := ret[0].(domain.VerifyEmailToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseVerifyToken indicates an expected call of ParseVerifyToken.
func (mr *MockTokenSignerMockRecorder) ParseVerifyToken(tokenStr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseVerifyToken", reflect.TypeOf((*MockTokenSigner)(nil).ParseVerifyToken), tokenStr)
}

// SignAccess mocks base method.
func (m *MockTokenSigner) SignAccess(uuid, sid string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignAccess", uuid, sid)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignAccess indicates an expected call of SignAccess.
func (mr *MockTokenSignerMockRecorder) SignAccess(uuid, sid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignAccess", reflect.TypeOf((*MockTokenSigner)(nil).SignAccess), uuid, sid)
}

// SignRefresh mocks base method.
func (m *MockTokenSigner) SignRefresh(uuid, sid string) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignRefresh", uuid, sid)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SignRefresh indicates an expected call of SignRefresh.
func (mr *MockTokenSignerMockRecorder) SignRefresh(uuid, sid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignRefresh", reflect.TypeOf((*MockTokenSigner)(nil).SignRefresh), uuid, sid)
}

// SignVerifyToken mocks base method.
func (m *MockTokenSigner) SignVerifyToken(uuid string, ttl time.Duration) (domain.VerifyTokenIssue, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignVerifyToken", uuid, ttl)
	ret0, _ := ret[0].(domain.VerifyTokenIssue)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SignVerifyToken indicates an expected call of SignVerifyToken.
func (mr *MockTokenSignerMockRecorder) SignVerifyToken(uuid, ttl interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignVerifyToken", reflect.TypeOf((*MockTokenSigner)(nil).SignVerifyToken), uuid, ttl)
}

// MockVerifyTokenRepo is a mock of VerifyTokenRepo interface.
type MockVerifyTokenRepo struct {
	ctrl     *gomock.Controller
	recorder *MockVerifyTokenRepoMockRecorder
}

// MockVerifyTokenRepoMockRecorder is the mock recorder for MockVerifyTokenRepo.
type MockVerifyTokenRepoMockRecorder struct {
	mock *MockVerifyTokenRepo
}

// NewMockVerifyTokenRepo creates a new mock instance.
func NewMockVerifyTokenRepo(ctrl *gomock.Controller) *MockVerifyTokenRepo {
	mock := &MockVerifyTokenRepo{ctrl: ctrl}
	mock.recorder = &MockVerifyTokenRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVerifyTokenRepo) EXPECT() *MockVerifyTokenRepoMockRecorder {
	return m.recorder
}

// InsertIssue mocks base method.
func (m *MockVerifyTokenRepo) InsertIssue(ctx context.Context, v domain.VerifyTokenIssue) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertIssue", ctx, v)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertIssue indicates an expected call of InsertIssue.
func (mr *MockVerifyTokenRepoMockRecorder) InsertIssue(ctx, v interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertIssue", reflect.TypeOf((*MockVerifyTokenRepo)(nil).InsertIssue), ctx, v)
}

// TryConsumeJTI mocks base method.
func (m *MockVerifyTokenRepo) TryConsumeJTI(ctx context.Context, v domain.VerifyEmailToken) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TryConsumeJTI", ctx, v)
	ret0, _ := ret[0].(error)
	return ret0
}

// TryConsumeJTI indicates an expected call of TryConsumeJTI.
func (mr *MockVerifyTokenRepoMockRecorder) TryConsumeJTI(ctx, v interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TryConsumeJTI", reflect.TypeOf((*MockVerifyTokenRepo)(nil).TryConsumeJTI), ctx, v)
}
