// Code generated by MockGen. DO NOT EDIT.
// Source: login.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	auth "github.com/Arclight-V/mtch/auth-service/internal/usecase/auth"
	gomock "github.com/golang/mock/gomock"
)

// MockLoginUseCase is a mock of LoginUseCase interface.
type MockLoginUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockLoginUseCaseMockRecorder
}

// MockLoginUseCaseMockRecorder is the mock recorder for MockLoginUseCase.
type MockLoginUseCaseMockRecorder struct {
	mock *MockLoginUseCase
}

// NewMockLoginUseCase creates a new mock instance.
func NewMockLoginUseCase(ctrl *gomock.Controller) *MockLoginUseCase {
	mock := &MockLoginUseCase{ctrl: ctrl}
	mock.recorder = &MockLoginUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLoginUseCase) EXPECT() *MockLoginUseCaseMockRecorder {
	return m.recorder
}

// Login mocks base method.
func (m *MockLoginUseCase) Login(ctx context.Context, input auth.LoginInput) (auth.LoginOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", ctx, input)
	ret0, _ := ret[0].(auth.LoginOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockLoginUseCaseMockRecorder) Login(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockLoginUseCase)(nil).Login), ctx, input)
}
