// Code generated by MockGen. DO NOT EDIT.
// Source: verify_email.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	auth "github.com/Arclight-V/mtch/auth-service/internal/usecase/auth"
	gomock "github.com/golang/mock/gomock"
)

// MockVerifyEmailUseCase is a mock of VerifyEmailUseCase interface.
type MockVerifyEmailUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockVerifyEmailUseCaseMockRecorder
}

// MockVerifyEmailUseCaseMockRecorder is the mock recorder for MockVerifyEmailUseCase.
type MockVerifyEmailUseCaseMockRecorder struct {
	mock *MockVerifyEmailUseCase
}

// NewMockVerifyEmailUseCase creates a new mock instance.
func NewMockVerifyEmailUseCase(ctrl *gomock.Controller) *MockVerifyEmailUseCase {
	mock := &MockVerifyEmailUseCase{ctrl: ctrl}
	mock.recorder = &MockVerifyEmailUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVerifyEmailUseCase) EXPECT() *MockVerifyEmailUseCaseMockRecorder {
	return m.recorder
}

// VerifyEmail mocks base method.
func (m *MockVerifyEmailUseCase) VerifyEmail(ctx context.Context, in auth.VerifyEmailInput) (auth.VerifyEmailOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyEmail", ctx, in)
	ret0, _ := ret[0].(auth.VerifyEmailOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyEmail indicates an expected call of VerifyEmail.
func (mr *MockVerifyEmailUseCaseMockRecorder) VerifyEmail(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyEmail", reflect.TypeOf((*MockVerifyEmailUseCase)(nil).VerifyEmail), ctx, in)
}
