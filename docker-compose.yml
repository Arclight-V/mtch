x-app-base: &app_base
  restart: unless-stopped
  environment:
    GODEBUG: madvdontneed=1
  expose:
    - "10903"   # for the internal network (Prometheus )
  healthcheck:
    test: ["CMD-SHELL", "wget -qO- http://localhost:10903/metrics >/dev/null 2>&1 || exit 1"]
    interval: 10s
    timeout: 3s
    retries: 5

services:
  # ====== Kafka (KRaft) ======
  kafka:
    image: confluentinc/cp-kafka:7.6.1
    environment:
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_NODE_ID: 1
      KAFKA_LISTENERS: PLAINTEXT://:9092,CONTROLLER://:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka:9093
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "false"
      KAFKA_LOG_DIRS: /var/lib/kafka/data
    ports:
      - "9092:9092"
    volumes:
      - kafka-data:/var/lib/kafka/data
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics.sh --bootstrap-server localhost:9092 --list >/dev/null 2>&1"]
      interval: 10s
      timeout: 5s
      retries: 10

  # Create topics
  kafka-init:
    image: confluentinc/cp-kafka:7.6.1
    depends_on: [kafka]
    entrypoint: ["/bin/bash","-lc"]
    command: >
      until kafka-topics --bootstrap-server kafka:9092 --list >/dev/null 2>&1; do sleep 1; done;
      kafka-topics --bootstrap-server kafka:9092 --create --if-not-exists
        --topic users.events --partitions 3 --replication-factor 1
        --config retention.ms=604800000 --config cleanup.policy=delete;
      kafka-topics --bootstrap-server kafka:9092 --create --if-not-exists
        --topic users.dlq --partitions 3 --replication-factor 1
        --config retention.ms=1209600000 --config cleanup.policy=delete;

  auth:
    <<: *app_base
    build:
      context: .         #  Dockerfile folder
      dockerfile: auth-service/Dockerfile
    image: mtch-auth-service:latest
    ports:
      - "8000:8000"
    healthcheck:
      test: [ "CMD-SHELL", "wget -qO- http://localhost:10902/metrics >/dev/null 2>&1 || exit 1" ]
      interval: 10s
      timeout: 3s
      retries: 5
    environment:
      SERVICE_NAME: auth
      AUTH_CONFIG: "/config/docker-config.yml"
      KAFKA_BOOTSTRAP: "kafka:9092"
    volumes:
      - ./auth-service/config:/config:ro
      - ./webwasm:/app/webwasm:ro
    depends_on:
      - user
      - mailhog
      - kafka
      - kafka-init

  user:
    <<: *app_base
    build:
      context: .
      dockerfile: user-service/Dockerfile
    image: mtch-user-service:latest
    environment:
      SERVICE_NAME: user
      METRICS_ADDR: ":10903"
      USER_CONFIG: "/config/docker-config.yml"
      KAFKA_BOOTSTRAP: "kafka:9092"
    healthcheck:
      test: [ "CMD-SHELL", "wget -qO- http://localhost:10903/metrics >/dev/null 2>&1 || exit 1" ]
      interval: 10s
      timeout: 3s
      retries: 5
    volumes:
      - ./user-service/config:/config:ro
    depends_on:
      - kafka
      - kafka-init

  mailhog:
    image: mailhog/mailhog:latest
    container_name: mailhog
    ports:
      - "1025:1025"
      - "8025:8025"

  prometheus:
    image: prom/prometheus:latest
    command:
      - --config.file=/etc/prometheus/prometheus.yml
      - --storage.tsdb.path=/prometheus
      - --web.enable-lifecycle
    volumes:
      - ./ops/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prom-data:/prometheus
    ports:
      - "9090:9090"
    depends_on:
      - auth
      - user

  grafana:
    image: grafana/grafana:latest
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
    volumes:
      - grafana-data:/var/lib/grafana
    ports:
      - "3000:3000"
    depends_on:
      - prometheus

  # ====== (Optional) Logs in Grafana: Loki + Promtail ======
  loki:
    image: grafana/loki:2.9.8
    container_name: loki
    command: -config.file=/etc/loki/loki-config.yml
    volumes:
      - ./ops/loki/loki-config.yml:/etc/loki/loki-config.yml:ro
      - loki-data:/loki
    ports:
      - "3100:3100"

  promtail:
    image: grafana/promtail:2.9.8
    container_name: promtail
    command: -config.file=/etc/promtail/promtail-config.yml
    volumes:
      - ./ops/promtail/promtail-config.yml:/etc/promtail/promtail-config.yml:ro
      - /var/log:/var/log:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      - loki

  otel-collector:
    image: otel/opentelemetry-collector-contrib:0.138.0
    command: ["--config=/etc/otel-collector.yaml"]
    volumes:
      - ./ops/otel-collector/otel-collector.yml:/etc/otel-collector.yaml
    ports:
      - 4317:4317

  jaeger:
    image: jaegertracing/all-in-one:1.60
    ports:
      - 16686:16686

volumes:
  prom-data:
  grafana-data:
  loki-data:
  kafka-data:
